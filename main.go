package main

import (
	"flag"
	"fmt"
	"math"
	"math/big"
	"strings"
)

var font = map[string][]string{
	"a": {
		"11111111111",
		"11111111111",
		"11188888111",
		"11881118811",
		"11881118811",
		"11888888811",
		"11881118811",
		"11881118811",
		"11881118811",
		"11111111111",
		"11111111111"},
	"b": {
		"11111111111",
		"11111111111",
		"11888888111",
		"11881118811",
		"11881118811",
		"11888888111",
		"11881118811",
		"11881118811",
		"11888888111",
		"11111111111",
		"11111111111"},
	"c": {
		"11111111111",
		"11111111111",
		"11188888111",
		"11881118811",
		"11881111111",
		"11881111111",
		"11881111111",
		"11881118811",
		"11188888111",
		"11111111111",
		"11111111111"},
	"d": {
		"11111111111",
		"11111111111",
		"11888881111",
		"11881118811",
		"11881118811",
		"11881118811",
		"11881118811",
		"11881118811",
		"11888881111",
		"11111111111",
		"11111111111"},
	"e": {
		"11111111111",
		"11111111111",
		"11888888811",
		"11881111111",
		"11881111111",
		"11888888111",
		"11881111111",
		"11881111111",
		"11888888811",
		"11111111111",
		"11111111111"},
	"f": {
		"11111111111",
		"11111111111",
		"11888888811",
		"11881111111",
		"11881111111",
		"11888888111",
		"11881111111",
		"11881111111",
		"11881111111",
		"11111111111",
		"11111111111"},
	"g": {
		"11111111111",
		"11111111111",
		"11888888111",
		"11881111811",
		"11881111111",
		"11881888111",
		"11881188811",
		"11881118811",
		"11888888111",
		"11111111111",
		"11111111111"},
	"h": {
		"11111111111",
		"11111111111",
		"11881118811",
		"11881118811",
		"11881118811",
		"11888888811",
		"11881118811",
		"11881118811",
		"11881118811",
		"11111111111",
		"11111111111"},
	"i": {
		"11111111111",
		"11111111111",
		"11118881111",
		"11111111111",
		"11118881111",
		"11118881111",
		"11118881111",
		"11118881111",
		"11118881111",
		"11111111111",
		"11111111111"},
	"j": {
		"11111111111",
		"11111111111",
		"11111118811",
		"11111118811",
		"11111118811",
		"11111118811",
		"11881118811",
		"11881118811",
		"11188888111",
		"11111111111",
		"11111111111"},
	"k": {
		"11111111111",
		"11111111111",
		"11881118811",
		"11881188111",
		"11881881111",
		"11888811111",
		"11881881111",
		"11881188111",
		"11881118811",
		"11111111111",
		"11111111111"},
	"l": {
		"11111111111",
		"11111111111",
		"11881111111",
		"11881111111",
		"11881111111",
		"11881111111",
		"11881111111",
		"11881111111",
		"11888888811",
		"11111111111",
		"11111111111"},
	"m": {
		"11111111111",
		"11111111111",
		"11811111811",
		"11888188811",
		"11888888811",
		"11881818811",
		"11881118811",
		"11881118811",
		"11881118811",
		"11111111111",
		"11111111111"},
	"n": {
		"11111111111",
		"11111111111",
		"11881118811",
		"11888118811",
		"11888818811",
		"11881888811",
		"11881188811",
		"11881188811",
		"11881118811",
		"11111111111",
		"11111111111"},
	"o": {
		"11111111111",
		"11111111111",
		"11888888811",
		"11881118811",
		"11881118811",
		"11881118811",
		"11881118811",
		"11881118811",
		"11888888811",
		"11111111111",
		"11111111111"},
	"p": {
		"11111111111",
		"11111111111",
		"11888888111",
		"11881118811",
		"11881118811",
		"11888888111",
		"11881111111",
		"11881111111",
		"11881111111",
		"11111111111",
		"11111111111"},
	"q": {
		"11111111111",
		"11111111111",
		"11888888811",
		"11881118811",
		"11881118811",
		"11881118811",
		"11881118811",
		"11888888811",
		"11111188811",
		"11111111111",
		"11111111111"},
	"r": {
		"11111111111",
		"11111111111",
		"11888888111",
		"11881118811",
		"11881118811",
		"11888888111",
		"11888811111",
		"11881888111",
		"11881118811",
		"11111111111",
		"11111111111"},
	"s": {
		"11111111111",
		"11111111111",
		"11888888811",
		"11881111111",
		"11811111111",
		"11888888811",
		"11111118811",
		"11111118811",
		"11888888811",
		"11111111111",
		"11111111111"},
	"t": {
		"11111111111",
		"11111111111",
		"11888888881",
		"11111881111",
		"11111881111",
		"11111881111",
		"11111881111",
		"11111881111",
		"11111881111",
		"11111111111",
		"11111111111"},
	"w": {
		"11111111111",
		"11881118811",
		"11881118811",
		"11881118811",
		"11881818811",
		"11888888811",
		"11888188811",
		"11881118811",
		"11881118811",
		"11111111111",
		"11111111111"},
	"u": {
		"11111111111",
		"11111111111",
		"11881118811",
		"11881118811",
		"11881118811",
		"11881118811",
		"11881118811",
		"11881118811",
		"11888888811",
		"11111111111",
		"11111111111"},
	"v": {
		"11111111111",
		"11111111111",
		"11881118811",
		"11881118811",
		"11881118811",
		"11881118811",
		"11881118811",
		"11881118811",
		"11888888811",
		"11111111111",
		"11111111111"},
	"x": {
		"11111111111",
		"11111111111",
		"11881118811",
		"11881118811",
		"11188188111",
		"11118881111",
		"11188188111",
		"11881118811",
		"11881118811",
		"11111111111",
		"11111111111"},
	"y": {
		"11111111111",
		"11111111111",
		"11881118811",
		"11881118811",
		"11881118811",
		"11888888111",
		"11881111111",
		"11881111111",
		"11881111111",
		"11881111111",
		"11111111111"},
	"z": {
		"11111111111",
		"11111111111",
		"11888888811",
		"11188111111",
		"11118111111",
		"11111881111",
		"11111181111",
		"11111188811",
		"11888888811",
		"11111111111",
		"11111111111"},
	" ": {
		"111111111",
		"111111111",
		"111111111",
		"111111111",
		"111111111",
		"111111111",
		"111111111",
		"111111111",
		"111111111",
		"111111111",
		"111111111"},
}

func text2banner(s string) string {
	ret := ""
	for i := 0; i < 11; i++ {
		for _, c := range s {
			ret += font[string(c)][i]
		}
		ret += "\n"
	}
	return ret
}

func banner2BigInt(b string) *big.Int {
	s := strings.Split(b, "\n")
	n := strings.Join(s, "")

	i := new(big.Int)
	i.SetString(n, 10)

	return i
}

func main() {
	var text string
	flag.StringVar(&text, "text", "banner", "text to banner")

	var nbases int
	flag.IntVar(&nbases, "nbase", 6, "number of pseudorandomly chosen bases")

	flag.Parse()

	banner := text2banner(strings.ToLower(text))

	digits := "0123456789"
	for idx, el := range banner {
		if el != '\n' {
			nbanner := banner
			for _, c := range digits {
				runes := []rune(nbanner)
				runes[idx] = c

				bi := banner2BigInt(string(runes))
				prime := bi.ProbablyPrime(nbases)
				if prime {
					fmt.Println("* BANNER\n")
					fmt.Println(string(runes))
					fmt.Println("* NUMBER\n")
					fmt.Println(bi)
					fmt.Println("\nThe probability of the chosen number being prime is", 1.0-1/math.Pow(4, float64(nbases)))
					return
				}
			}
		}
	}

	fmt.Println("Not found prime to text:", text)
}
